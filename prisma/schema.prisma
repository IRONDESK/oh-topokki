generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id
  email      String   @unique
  name       String?
  avatar     String?
  provider   String
  providerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  restaurants Restaurant[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("users")
}

model Restaurant {
  id            String   @id @default(uuid())
  name          String
  address       String
  latitude      Float
  longitude     Float
  phoneNumber   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  topokkiType   String?
  price         Int?
  riceKinds     String[] @default([])
  sauceKinds    String[] @default([])
  spiciness     Int?
  canChangeSpicy Boolean @default(false)
  sideMenus     String[] @default([])
  noodleKinds   String[] @default([])
  sundaeType    String?
  others        String[] @default([])
  recommend     Json     @default("[]")

  averageRating Float @default(0)
  reviewCount   Int   @default(0)

  reviews       Review[]
  favorites     Favorite[]

  @@map("restaurants")
}

model Review {
  id           String   @id @default(uuid())
  content      String
  rating       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Favorite {
  id           String   @id @default(uuid())
  memo         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@map("favorites")
}